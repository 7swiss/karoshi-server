#!/bin/bash
#Copyright (C) 2007  Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aball@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/windows_client_allow_roaming_profile_cgi
then
echo `date`: windows_client_allow_roaming_profile - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/windows_client_allow_roaming_profile_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/windows_client_allow_roaming_profile.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $windows_client_allow_roaming_profile_cgi'check' ]
then
echo `date`: windows_client_allow_roaming_profile - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: windows_client_allow_roaming_profile - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:%\n-+'`
if [ $DATA'null' = null ]
then
echo `date`: windows_client_allow_roaming_profile - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
USERNAME=`echo "$DATA" | cut -s -d: -f4`
PERMISSIONS=`echo "$DATA" | cut -s -d: -f5`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
echo `date`: windows_client_allow_roaming_profile - Not called by windows_client_allow_roaming_profile.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_USER'null' = null ]
then
echo `date`: windows_client_allow_roaming_profile - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: windows_client_allow_roaming_profile - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $USERNAME'null' = null ]
then
echo `date`: windows_client_allow_roaming_profile - Blank username by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit
fi
if [ $USERNAME'null' = null ]
then
echo `date`: windows_client_allow_roaming_profile - Blank permissions by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit
fi

#Check to see that this user does not already have a roaming profile
if [ -d /home/applications/profiles/$USERNAME ]
then
echo `date`: windows_client_allow_roaming_profile - $USERNAME already has a roaming profile by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
fi 

if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
echo `date`: windows_client_allow_roaming_profile - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

########################
#Check for federated servers
########################

FEDERATED_LDAP_SERVERS=no
if [ -d /opt/karoshi/server_network/federated_ldap_servers/ ]
then
if [ `ls -1 /opt/karoshi/server_network/federated_ldap_servers/ | wc -l` -gt 0 ]
then
FEDERATED_LDAP_SERVERS=yes
fi
fi

#######################
#Check all federated servers are up converting the user
#######################
#Check slave ldap servers
if [ $FEDERATED_LDAP_SERVERS = yes ]
then
for FEDERATEDLDAPSERVERS in /opt/karoshi/server_network/federated_ldap_servers/*
do
FEDERATEDLDAPSERVER=`basename $FEDERATEDLDAPSERVERS`
SSHSTATUS=0
ssh -o PasswordAuthentication=no -o ConnectTimeout=2 $FEDERATEDLDAPSERVER ls 1>/dev/null
SSHSTATUS=`echo $?`
if [ $SSHSTATUS != 0 ]
then
echo `date`: windows_client_allow_roaming_profile - user not converted due to ssh failure on $FEDERATEDLDAPSERVER by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 105
fi
done
fi

if [ $FEDERATED_LDAP_SERVERS = yes ]
then
for FEDERATEDLDAPSERVERS in /opt/karoshi/server_network/federated_ldap_servers/*
do
FEDERATEDLDAPSERVER=`basename $FEDERATEDLDAPSERVERS`

#Make sure we are using the highest available UID in case machine accounts have been added on the federated servers
SAMBADOMAIN=`grep "workgroup ="  /etc/samba/smb.conf | cut -d= -f2 | sed 's/ //g'`
LDAPPASS=`sed -n 1,1p /etc/ldap.secret`
#Get uidnumber from this server
UIDNUMBER=`ldapsearch -x -w $LDAPPASS -D "cn=admin,dc=karoshi,dc=local" sambaDomainName=$SAMBADOMAIN | grep ^uidNumber | cut -d: -f2 | sed 's/ //g' | tr -cd "0-9"`


#Get uidnumber from federated server
FEDERATEDUIDNUMBER=$(ssh -x -o PasswordAuthentication=no $FEDERATEDLDAPSERVER '
SAMBADOMAIN=`grep "workgroup ="  /etc/samba/smb.conf | cut -d= -f2 | sed "s/ //g"`
LDAPPASS=`sed -n 1,1p /etc/ldap.secret`
ldapsearch -x -w $LDAPPASS -D "cn=admin,dc=karoshi,dc=local" sambaDomainName=$SAMBADOMAIN | grep ^uidNumber | cut -d: -f2 | sed "s/ //g" | tr -cd "0-9"
')

if [ $FEDERATEDUIDNUMBER'null' != null ] && [ $UIDNUMBER'null' != null ]
then
if [ $FEDERATEDUIDNUMBER -gt $UIDNUMBER ]
then
UIDNUMBER=$FEDERATEDUIDNUMBER
#Update uidNumber to match highest number
echo -e "dn: sambaDomainName=$SAMBADOMAIN,dc=karoshi,dc=local
changetype: modify
replace: uidNumber
uidNumber: $UIDNUMBER
" | ldapmodify -x -D "cn=admin,dc=karoshi,dc=local" -w $LDAPPASS 1>/dev/null
fi
fi

done
fi

########################
#Allow the roaming profile
########################
echo `date`: windows_client_allow_roaming_profile - Roaming profile enabled "for" $USERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
CURRENTPRIGROUP=`id -g -n $USERNAME`
CURRENTSERVER=`grep ^$CURRENTPRIGROUP, /var/lib/samba/netlogon/groups.txt | cut -d, -f2`

[ `grep -c $USERNAME /var/lib/samba/netlogon/groups.txt` = 0 ] && echo $USERNAME,$CURRENTSERVER >> /var/lib/samba/netlogon/groups.txt

CURRENTGROUPS=`id -G -n $USERNAME | sed 's/ /,/g'`


[ ! -f /var/lib/samba/netlogon/windows_settings/drives/$USERNAME.kix ] && cp -f /var/lib/samba/netlogon/windows_settings/drives/$CURRENTPRIGROUP.kix /var/lib/samba/netlogon/windows_settings/drives/$USERNAME.kix
#[ ! -f /var/lib/samba/netlogon/windows_settings/security/$USERNAME.kix ] && ln -s /var/lib/samba/netlogon/default_roaming.kix /var/lib/samba/netlogon/windows_settings/security/$USERNAME.kix

[ ! -f /var/lib/samba/netlogon/windows_settings/security/$USERNAME.kix ] && ln -s /var/lib/samba/netlogon/windows_settings/security/$PERMISSIONS /var/lib/samba/netlogon/windows_settings/security/$USERNAME.kix

[ ! -f /opt/karoshi/server_network/group_information/$USERNAME ] && cp -f /opt/karoshi/server_network/group_information/$CURRENTPRIGROUP /opt/karoshi/server_network/group_information/$USERNAME

#Add to pam_mount.conf.xml
if [ `grep -c -w $USERNAME /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml` = 0 ]
then
LINENUMBER=`grep -n "</pam_mount>" /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml | cut -d: -f1`
#Delete last line
sed -i $LINENUMBER"d" /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml
#Remove any empty lines
sed -i "/^$/d" /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml
#Add in line for the user
echo "<volume options=\"uid=%(USER),dmask=0700\" mountpoint=\"~/network/home\" path=\"%(USER)\" server=\"$HOSTNAME.internal\" pgrp=\"$USERNAME\" fstype=\"smbfs\"/>" >> /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml
#Add in extra shares if needed

if [ $CURRENTPRIGROUP = itadmin ]
then
echo "<volume options=\"uid=%(USER),dmask=0700\" mountpoint=\"~/network/itadmin\" path=\"itadmin\" server=\"$HOSTNAME.internal\" pgrp=\"$USERNAME\" fstype=\"smbfs\" />" >> /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml
fi
if [ $CURRENTPRIGROUP = staff ] || [ $CURRENTPRIGROUP = staff2 ] || [ $CURRENTPRIGROUP = staff3 ] || [ $CURRENTPRIGROUP = staff4 ] || [ $CURRENTPRIGROUP = officestaff ] || [ $CURRENTPRIGROUP = itadmin ]
then
echo "<volume options=\"uid=%(USER),dmask=0700\" mountpoint=\"~/network/subjects\" path=\"subjects\" server=\"$HOSTNAME.internal\" pgrp=\"$USERNAME\" fstype=\"smbfs\" />" >> /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml
echo "<volume options=\"uid=%(USER),dmask=0700\" mountpoint=\"~/network/staffshare\" path=\"staffshare\" server=\"$HOSTNAME.internal\" pgrp=\"$USERNAME\" fstype=\"smbfs\" />" >> /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml
fi

#Add last line back in
echo "</pam_mount>" >> /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml
fi
########################
#Create new group for user
########################
#Set gidNumber to uidNumber
SAMBADOMAIN=`grep "workgroup =" /etc/samba/smb.conf | sed "s/ //g" | cut -d= -f2 | sed -n 1,1p`
LDAPPASS=`sed -n 1,1p /etc/ldap.secret`
UIDNUMBER=`ldapsearch -x -w $LDAPPASS -D "cn=admin,dc=karoshi,dc=local" sambaDomainName=$SAMBADOMAIN | grep ^uidNumber | cut -d: -f2 | sed 's/ //g'`
echo -e "dn: sambaDomainName=$SAMBADOMAIN,dc=karoshi,dc=local
changetype: modify
replace: gidNumber
gidNumber: $UIDNUMBER
" | ldapmodify -x -D "cn=admin,dc=karoshi,dc=local" -w $LDAPPASS 1>/dev/null
smbldap-groupadd $USERNAME 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
#Set SID for the group
GROUP_RID=`getent group $USERNAME | cut -d: -f3`
SAMBASID=`net getlocalsid | cut -d: -f2 | sed "s/ //g"`
smbldap-groupmod -s $SAMBASID-$GROUP_RID $USERNAME 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

#Set uidNumber to uidNumber+1
let UIDNUMBER=$UIDNUMBER+1
echo -e "dn: sambaDomainName=$SAMBADOMAIN,dc=karoshi,dc=local
changetype: modify
replace: uidNumber
uidNumber: $UIDNUMBER
" | ldapmodify -x -D "cn=admin,dc=karoshi,dc=local" -w $LDAPPASS 1>/dev/null

#Create new group on federated servers
if [ $FEDERATED_LDAP_SERVERS = yes ]
then
for FEDERATEDLDAPSERVERS in /opt/karoshi/server_network/federated_ldap_servers/*
do
FEDERATEDLDAPSERVER=`basename $FEDERATEDLDAPSERVERS`
ssh -x -o PasswordAuthentication=no $FEDERATEDLDAPSERVER '
LOG_DATE=`date +%F`
#Set gidNumber to uidNumber
SAMBADOMAIN=`grep "workgroup =" /etc/samba/smb.conf | sed "s/ //g" | cut -d= -f2 | sed -n 1,1p`
LDAPPASS=`sed -n 1,1p /etc/ldap.secret`
UIDNUMBER=`ldapsearch -x -w $LDAPPASS -D "cn=admin,dc=karoshi,dc=local" sambaDomainName=$SAMBADOMAIN | grep ^uidNumber | cut -d: -f2 | sed 's/ //g'`
echo -e "dn: sambaDomainName=$SAMBADOMAIN,dc=karoshi,dc=local
changetype: modify
replace: gidNumber
gidNumber: $UIDNUMBER
" | ldapmodify -x -D "cn=admin,dc=karoshi,dc=local" -w $LDAPPASS 1>/dev/null
smbldap-groupadd '$USERNAME' 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
#Set SID for the group
GROUP_RID=`getent group '$USERNAME' | cut -d: -f3`
SAMBASID=`net getlocalsid | cut -d: -f2 | sed "s/ //g"`
smbldap-groupmod -s $SAMBASID-$GROUP_RID '$USERNAME' 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

#Set uidNumber to uidNumber+1
let UIDNUMBER=$UIDNUMBER+1
echo -e "dn: sambaDomainName=$SAMBADOMAIN,dc=karoshi,dc=local
changetype: modify
replace: uidNumber
uidNumber: $UIDNUMBER
" | ldapmodify -x -D "cn=admin,dc=karoshi,dc=local" -w $LDAPPASS 1>/dev/null
'
done
fi

##########################
#Copy in current profile
##########################
cp -R /home/applications/profiles/default_roaming_profile /home/applications/profiles/$USERNAME
chown -c -R $USERNAME:itadmin /home/applications/profiles/$USERNAME 1>/dev/null
chmod 0660 -R /home/applications/profiles/$USERNAME
chmod u+X,g+X -R /home/applications/profiles/$USERNAME
ln -s /home/applications/profiles/$USERNAME /home/applications/profiles/$USERNAME.V2

# Change user to new primary group
smbldap-usermod -g $USERNAME $USERNAME
# Give user access to current groups
smbldap-usermod -G "$CURRENTGROUPS" $USERNAME
windows_client_allow_roaming_profile_STATUS=`echo $?`

#########################
#Rebuild primarygroups.txt - this file is to allow for windows 7 logins where the primary group feature is broken
#########################
[ -f /var/lib/samba/netlogon/primarygroups.txt ] && rm -f /var/lib/samba/netlogon/primarygroups.txt
for USERDETAILS in `getent passwd | grep /home/users/`
do
KAROSHIUSER=`echo $USERDETAILS | cut -d: -f1 | sed 's/,//g'`
PRIGROUP=`id -g -n $KAROSHIUSER`
echo $KAROSHIUSER,$PRIGROUP >> /var/lib/samba/netlogon/primarygroups.txt
done

touch /opt/karoshi/server_network/windows_roaming_profile_users
if [ `grep -c $USERNAME /opt/karoshi/server_network/windows_roaming_profile_users` = 0 ]
then
echo $USERNAME >> /opt/karoshi/server_network/windows_roaming_profile_users
fi

if [ $FEDERATED_LDAP_SERVERS = yes ]
then
for FEDERATEDLDAPSERVERS in /opt/karoshi/server_network/federated_ldap_servers/*
do
FEDERATEDLDAPSERVER=`basename $FEDERATEDLDAPSERVERS`
ssh -x -o PasswordAuthentication=no $FEDERATEDLDAPSERVER '

[ ! -f /var/lib/samba/netlogon/windows_settings/drives/'$USERNAME'.kix ] && cp -f /var/lib/samba/netlogon/windows_settings/drives/'$CURRENTPRIGROUP'.kix /var/lib/samba/netlogon/windows_settings/drives/'$USERNAME'.kix
#[ ! -f /var/lib/samba/netlogon/windows_settings/security/'$USERNAME'.kix ] && ln -s /var/lib/samba/netlogon/default_roaming.kix /var/lib/samba/netlogon/windows_settings/security/'$USERNAME'.kix

[ ! -f /var/lib/samba/netlogon/windows_settings/security/'$USERNAME'.kix ] && ln -s /var/lib/samba/netlogon/windows_settings/security/'$PERMISSIONS' /var/lib/samba/netlogon/windows_settings/security/'$USERNAME'.kix

[ ! -f /opt/karoshi/server_network/group_information/'$USERNAME' ] && cp -f /opt/karoshi/server_network/group_information/'$CURRENTPRIGROUP' /opt/karoshi/server_network/group_information/'$USERNAME'

#Add to pam_mount.conf.xml
if [ `grep -c -w '$USERNAME' /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml` = 0 ]
then
LINENUMBER=`grep -n "</pam_mount>" /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml | cut -d: -f1`
#Delete last line
sed -i $LINENUMBER"d" /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml
#Remove any empty lines
sed -i "/^$/d" /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml
#Add in line for the user
echo "<volume options=\"uid=%(USER),dmask=0700\" mountpoint=\"~/network/home\" path=\"%(USER)\" server=\"'$HOSTNAME'.internal\" pgrp=\"'$USERNAME'\" fstype=\"smbfs\"/>" >> /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml
#Add in extra shares if needed

if [ '$CURRENTPRIGROUP' = itadmin ]
then
echo "<volume options=\"uid=%(USER),dmask=0700\" mountpoint=\"~/network/itadmin\" path=\"itadmin\" server=\"'$HOSTNAME'.internal\" pgrp=\"'$USERNAME'\" fstype=\"smbfs\" />" >> /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml
fi
if [ '$CURRENTPRIGROUP' = staff ] || [ '$CURRENTPRIGROUP' = staff2 ] || [ '$CURRENTPRIGROUP' = staff3 ] || [ '$CURRENTPRIGROUP' = staff4 ] || [ '$CURRENTPRIGROUP' = officestaff ] || [ '$CURRENTPRIGROUP' = itadmin ]
then
echo "<volume options=\"uid=%(USER),dmask=0700\" mountpoint=\"~/network/subjects\" path=\"subjects\" server=\"'$HOSTNAME'.internal\" pgrp=\"'$USERNAME'\" fstype=\"smbfs\" />" >> /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml
echo "<volume options=\"uid=%(USER),dmask=0700\" mountpoint=\"~/network/staffshare\" path=\"staffshare\" server=\"'$HOSTNAME'.internal\" pgrp=\"'$USERNAME'\" fstype=\"smbfs\" />" >> /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml
fi

#Add last line back in
echo "</pam_mount>" >> /var/lib/samba/netlogon/linuxclient/pam_mount.conf.xml
fi

##########################
#Copy in default roaming profile profile
##########################
cp -R /home/applications/profiles/default_roaming_profile /home/applications/profiles/'$USERNAME'
chown -c -R '$USERNAME':itadmin /home/applications/profiles/'$USERNAME' 1>/dev/null
chmod 0660 -R /home/applications/profiles/'$USERNAME'
chmod u+X,g+X -R /home/applications/profiles/'$USERNAME'

# Change user to new primary group
smbldap-usermod -g '$USERNAME' '$USERNAME'
# Give user access to current groups
smbldap-usermod -G "'$CURRENTGROUPS'" '$USERNAME'

#########################
#Rebuild primarygroups.txt - this file is to allow for windows 7 logins where the primary group feature is broken
#########################
[ -f /var/lib/samba/netlogon/primarygroups.txt ] && rm -f /var/lib/samba/netlogon/primarygroups.txt
for USERDETAILS in `getent passwd | grep /home/users/`
do
KAROSHIUSER=`echo $USERDETAILS | cut -d: -f1 | sed 's/,//g'`
PRIGROUP=`id -g -n $KAROSHIUSER`
echo $KAROSHIUSER,$PRIGROUP >> /var/lib/samba/netlogon/primarygroups.txt
done
touch /opt/karoshi/server_network/windows_roaming_profile_users
if [ `grep -c '$USERNAME' /opt/karoshi/server_network/windows_roaming_profile_users` = 0 ]
then
echo '$USERNAME' >> /opt/karoshi/server_network/windows_roaming_profile_users
fi
'
done
fi

exit $windows_client_allow_roaming_profile_STATUS
