#!/bin/bash
#Copyright (C) 2007  Paul Sharrad

#This file is part of Karoshi Server.
#
#Karoshi Server is free software: you can redistribute it and/or modify
#it under the terms of the GNU Affero General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#Karoshi Server is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU Affero General Public License for more details.
#
#You should have received a copy of the GNU Affero General Public License
#along with Karoshi Server.  If not, see <http://www.gnu.org/licenses/>.

#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aball@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
#Language
LOG_DATE=`date +%F`
[ $LOG_DATE'null' = null ] && exit
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/karoshi_servers_add_cgi
then
echo `date`: karoshi_servers_add - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/karoshi_servers_add_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/karoshi_servers_add.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $karoshi_servers_add_cgi'check' ]
then
echo `date`: karoshi_servers_add - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 1 ]
then
echo `date`: karoshi_servers_add - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo $* | cut -s -d: -f1`
REMOTE_ADDR=`echo $* | cut -s -d: -f2`
REMOTE_MD5=`echo $* | cut -s -d: -f3`
SERVER=`echo $* | cut -s -d: -f4`
PASSWORD=`echo $* | cut -s -d: -f5`
TCPIPNUMBER=`echo $* | cut -s -d: -f6`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
echo `date`: karoshi_servers_add - Not called by karoshi_servers_add.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_USER'null' = null ]
then
echo `date`: karoshi_servers_add - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: karoshi_servers_add - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $SERVER'null' = null ]
then
echo `date`: karoshi_servers_add - Blank username by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit
fi
if [ $PASSWORD'null' = null ]
then
echo `date`: karoshi_servers_add - Blank password by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
echo `date`: karoshi_servers_add - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
############################
#Language
############################
LANGCHOICE=englishuk
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER/language_choice ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER/language_choice
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/system/karoshi_servers_add ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/system/karoshi_servers_add
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/all ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/all

#Create ssh folder
[ ! -d /root/.ssh ] && mkdir /root/.ssh
chmod 0700 /root/.ssh

########################
#Check to see if keys do not exist
########################

if ! test -f $HOME/.ssh/id_rsa || ! test -f $HOME/.ssh/id_rsa.pub || ! test -f $HOME/.ssh/id_dsa || ! test -f $HOME/.ssh/id_dsa.pub
then
echo `date`: karoshi_servers_add - creating ssh keys by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
#Check that timeout has been set
TIMEOUTSTATUS=`grep -c '#''   'ConnectTimeout' '0 /etc/ssh/ssh_config`
if [ $TIMEOUTSTATUS != 0 ]
then
sed -i 's/#   ConnectTimeout 0/ConnectTimeout 4/g' /etc/ssh/ssh_config
fi
#Check that StrictHostkeychecking is set to no
HOSTKEYSTATUS=`grep -c '#''   'StrictHostKeyChecking' 'ask /etc/ssh/ssh_config`
if [ $HOSTKEYSTATUS != 0 ]
then
sed -i 's/#   StrictHostKeyChecking ask/StrictHostKeyChecking no/g' /etc/ssh/ssh_config
fi

rm -f -R $HOME/.ssh/id_rsa
rm -f -R $HOME/.ssh/id_dsa
ssh-keygen -t rsa -N '' -f $HOME/.ssh/id_rsa > /dev/null
ssh-keygen -t dsa -N '' -f $HOME/.ssh/id_dsa > /dev/null
fi
############################
#Setup ssh connections
############################

#Add entry to /etc/hosts if needed
if [ `grep -w -c $SERVER /etc/hosts` = 0 ]
then
echo $TCPIPNUMBER'	''	'$SERVER $SERVER.internal >> /etc/hosts
#Restart dnsmasq
source /opt/karoshi/serversetup/variables/distro
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/dns_stop 1>/dev/null 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/dns_start 1>/dev/null 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
fi

############################
#Check known_hosts file for server entry
############################
#if [ -f /root/.ssh/known_hosts ]
#then
#ENTRY_COUNT=`grep -c ^$SERVER /root/.ssh/known_hosts`
#if [ $ENTRY_COUNT != 0 ]
#then
#Delete server entry from known_hosts
#ENTRY_LINE_NUMBER=`grep -n ^$SERVER /root/.ssh/known_hosts | cut -d: -f1`
#sed -i $ENTRY_LINE_NUMBER'd' /root/.ssh/known_hosts
#Remove any empty lines
#sed -i /^$/d /root/.ssh/known_hosts
#fi
#fi


#Delete known hosts to avoid man in the middle warnings on re-installed servers.
[ -f /root/.ssh/known_hosts ] && rm -f /root/.ssh/known_hosts

#cat /root/.ssh/id_rsa.pub > /root/.ssh/authorized_keys2
#cat /root/.ssh/id_dsa.pub >> /root/.ssh/authorized_keys2
[ ! -d /root/.ssh_servers ] && mkdir /root/.ssh_servers
chmod 0700 /root/.ssh_servers

cat /root/.ssh/id_rsa.pub > /root/.ssh_servers/authorized_keys2
cat /root/.ssh/id_dsa.pub >> /root/.ssh_servers/authorized_keys2


#cp -f /root/.ssh/authorized_keys2 /root/.ssh_servers/
chmod 0600 /root/.ssh_servers/authorized_keys2
echo `date`: karoshi_servers_add - Enabling ssh connection 'for' $SERVER by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

if [ ! -d /opt/karoshi/server_network ]
then
mkdir -p /opt/karoshi/server_network
chmod 0750 /opt/karoshi/server_network
chown root.apache_karoshi /opt/karoshi/server_network
fi

if [ ! -d /opt/karoshi/server_network/servers ]
then
mkdir -p /opt/karoshi/server_network/servers
chmod 0750 /opt/karoshi/server_network/servers
chown root.apache_karoshi /opt/karoshi/server_network/servers
fi

if [ -d /opt/karoshi/server_network/servers/$SERVER ]
then
ssh -x -o PasswordAuthentication=no $SERVER '
rm -f -R $HOME/.ssh/known_hosts
'
fi

/opt/karoshi/web_controls/exec/activate_ssh $SERVER $PASSWORD 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

#Check to see that ssh works
ssh -x -o PasswordAuthentication=no $SERVER 'ls /tmp' 1>/dev/null 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
SSHRESULT=`echo $?`
if [ $SSHRESULT = 0 ]
then

if [ ! -f /opt/karoshi/server_network/federated_ldap_servers/$SERVER ]
then
[ ! -d /opt/karoshi/server_network/servers/$SERVER ] && mkdir -p /opt/karoshi/server_network/servers/$SERVER
echo $NO_ROLEMSG > /opt/karoshi/server_network/servers/$SERVER/no_role
fi

#Copy in boot controls
scp -r -o PasswordAuthentication=no /opt/karoshi/serversetup/distro/ubuntu/scripts/control_services $SERVER:/opt/karoshi/serversetup/distro/ubuntu/scripts/
scp -r -o PasswordAuthentication=no /opt/karoshi/serversetup/distro/ubuntu/scripts/startonboot $SERVER:/opt/karoshi/serversetup/distro/ubuntu/scripts/
scp -r -o PasswordAuthentication=no /opt/karoshi/serversetup/distro/ubuntu/scripts/stoponboot $SERVER:/opt/karoshi/serversetup/distro/ubuntu/scripts/

#Copy uptime daemon to server
scp -r /opt/karoshi/serversetup/scripts/uptime $SERVER:/opt/karoshi/serversetup/scripts/
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVER '
#Stop existing uptime
source /opt/karoshi/serversetup/variables/distro
echo "<br><li>$HOSTNAME - disabling uptimed</li>"
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/uptimed_stop 1>/dev/null
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/stoponboot/uptimed
#Stop karoshi-uptime if it is already running to apply new version
if [ -f /etc/init.d/karoshi-uptime ]
then
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/karoshi-uptime_stop 1>/dev/null
fi
#Copy in files
echo "<li>$HOSTNAME - installing karoshi-uptime</li>"
cp /opt/karoshi/serversetup/scripts/uptime/karoshi-uptime /etc/init.d
cp /opt/karoshi/serversetup/scripts/uptime/karoshi-uptime.sh /usr/sbin/
chmod 0755 /usr/sbin/karoshi-uptime.sh
chmod 0755 /etc/init.d/karoshi-uptime
#Start uptime script
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/karoshi-uptime_start 1>/dev/null
#Set update script to run on boot
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/karoshi-uptime
'

#Re-enable keys for backup servers

if [ -d /opt/karoshi/server_network/backup_servers/backup_settings ]
then
if [ `ls -1 /opt/karoshi/server_network/backup_servers/backup_settings | wc -l` -gt 0 ]
then
for KAROSHI_SERVER in /opt/karoshi/server_network/backup_servers/backup_settings/*
do
KAROSHI_SERVER=`basename $KAROSHI_SERVER`
if [ -f /root/.ssh_servers/authorized_keys$KAROSHI_SERVER ]
then
scp -o PasswordAuthentication=no /root/.ssh_servers/authorized_keys$KAROSHI_SERVER $SERVER:/root/.ssh
ssh -x -o PasswordAuthentication=no $SERVER '
cat /root/.ssh/authorized_keys'$KAROSHI_SERVER' >> /root/.ssh/authorized_keys2
'
fi
done
fi
fi

exit
fi
exit 101
