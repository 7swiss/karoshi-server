#!/bin/bash
#Copyright (C) 2011 Paul Sharrad
#This program is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aball@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
[ $LOG_DATE'null' = null ] && exit

########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/services_view_cgi
then
echo `date`: services_view - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/services_view_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/services_view.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $services_view_cgi'check' ]
then
echo `date`: services_view - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: services_view - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
read DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:%\n-+-'`
if [ $DATA'null' = null ]
then
echo `date`: services_view - no data >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo "$DATA" | cut -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -d: -f3`
SERVERNAME=`echo "$DATA" | cut -s -d: -f4`
SERVERTYPE=`echo "$DATA" | cut -s -d: -f5`
SERVERMASTER=`echo "$DATA" | cut -s -d: -f6`
MOBILE=`echo "$DATA" | cut -s -d: -f7`

########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
echo `date`: services_view - Not called by services_view.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_USER'null' = null ]
then
echo `date`: services_view - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: services_view - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $SERVERNAME'null' = null ]
then
echo `date`: services_view - Blank server by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $SERVERTYPE'null' = null ]
then
echo `date`: services_view - Blank servertype by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $SERVERTYPE = federatedslave ]
then
if [ $SERVERMASTER'null' = null ]
then
echo `date`: services_view - Blank servermaster by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
fi
if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
echo `date`: services_view - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

echo `date`: services_view $SERVERNAME - by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

############################
#Language
############################
LANGCHOICE=englishuk
[ -f /opt/karoshi/web_controls/user_prefs/$REMOTE_USER/language_choice ] && source /opt/karoshi/web_controls/user_prefs/$REMOTE_USER/language_choice
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/system/services ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/system/services
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/all ] || LANGCHOICE=englishuk
source /opt/karoshi/web_controls/language/$LANGCHOICE/all
source /opt/karoshi/serversetup/variables/distro

ICON1=/images/submenus/system/service_running.png
ICON2=/images/submenus/system/service_stopped.png

#Get suggested service list for this server
function suggest_services {
if [ $SERVERTYPE = network ]
then
DSERVICES=cron
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/1pdc ] && DSERVICES=$DSERVICES,dns,samba
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/apacheserver ] && DSERVICES=$DSERVICES,apache,mysql
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/casserver ] && DSERVICES=$DSERVICES,apache
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/distributionserver ] && DSERVICES=$DSERVICES,nfs,tftpd
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/emailserver ] && DSERVICES=$DSERVICES,apache,mysql,mailscanner,postfix,xinetd
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/fileserver ] && DSERVICES=$DSERVICES,samba
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/homeaccess ] && DSERVICES=$DSERVICES,apache
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/squid ] && DSERVICES=$DSERVICES,apache,dansguardian,squid,apt-cacher-ng
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/printserver ] && DSERVICES=$DSERVICES,cups,samba
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/radiusserver ] && DSERVICES=$DSERVICES,radius
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/reverseproxyserver ] && DSERVICES=$DSERVICES,nginx
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/monitoring ] && DSERVICES=$DSERVICES,apache,mon
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/dhcpserver ] && DSERVICES=$DSERVICES,dhcp
[ -f /opt/karoshi/server_network/servers/$SERVERNAME/ldapserver ] && DSERVICES=$DSERVICES,ldap
fi

if [ $SERVERTYPE = federated ]
then
DSERVICES=cron
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERNAME/servers/$SERVERNAME/1pdc ] && DSERVICES=$DSERVICES,dns,samba
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERNAME/servers/$SERVERNAME/apacheserver ] && DSERVICES=$DSERVICES,apache,mysql
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERNAME/servers/$SERVERNAME/casserver ] && DSERVICES=$DSERVICES,apache
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERNAME/servers/$SERVERNAME/distributionserver ] && DSERVICES=$DSERVICES,nfs,tftpd
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERNAME/servers/$SERVERNAME/emailserver ] && DSERVICES=$DSERVICES,apache,mysql,mailscanner,postfix,xinetd
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERNAME/servers/$SERVERNAME/fileserver ] && DSERVICES=$DSERVICES,samba
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERNAME/servers/$SERVERNAME/homeaccess ] && DSERVICES=$DSERVICES,apache
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERNAME/servers/$SERVERNAME/squid ] && DSERVICES=$DSERVICES,apache,dansguardian,squid,apt-cacher-ng
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERNAME/servers/$SERVERNAME/printserver ] && DSERVICES=$DSERVICES,cups,samba
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERNAME/servers/$SERVERNAME/radiusserver ] && DSERVICES=$DSERVICES,radius
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERNAME/servers/$SERVERNAME/reverseproxyserver ] && DSERVICES=$DSERVICES,nginx
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERNAME/servers/$SERVERNAME/monitoring ] && DSERVICES=$DSERVICES,apache,mon
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERNAME/servers/$SERVERNAME/dhcpserver ] && DSERVICES=$DSERVICES,dhcp
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERNAME/servers/$SERVERNAME/ldapserver ] && DSERVICES=$DSERVICES,ldap
fi

if [ $SERVERTYPE = federatedslave ]
then
DSERVICES=cron
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERMASTER/servers/$SERVERNAME/1pdc ] && DSERVICES=$DSERVICES,dns,samba
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERMASTER/servers/$SERVERNAME/apacheserver ] && DSERVICES=$DSERVICES,apache,mysql
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERMASTER/servers/$SERVERNAME/casserver ] && DSERVICES=$DSERVICES,apache
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERMASTER/servers/$SERVERNAME/distributionserver ] && DSERVICES=$DSERVICES,nfs,tftpd
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERMASTER/servers/$SERVERNAME/emailserver ] && DSERVICES=$DSERVICES,apache,mysql,mailscanner,postfix,xinetd
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERMASTER/servers/$SERVERNAME/fileserver ] && DSERVICES=$DSERVICES,samba
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERMASTER/servers/$SERVERNAME/homeaccess ] && DSERVICES=$DSERVICES,apache
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERMASTER/servers/$SERVERNAME/squid ] && DSERVICES=$DSERVICES,apache,dansguardian,squid,apt-cacher-ng
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERMASTER/servers/$SERVERNAME/printserver ] && DSERVICES=$DSERVICES,cups,samba
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERMASTER/servers/$SERVERNAME/radiusserver ] && DSERVICES=$DSERVICES,radius
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERMASTER/servers/$SERVERNAME/reverseproxyserver ] && DSERVICES=$DSERVICES,nginx
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERMASTER/servers/$SERVERNAME/monitoring ] && DSERVICES=$DSERVICES,apache,mon
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERMASTER/servers/$SERVERNAME/dhcpserver ] && DSERVICES=$DSERVICES,dhcp
[ -f /opt/karoshi/server_network/federated_ldap_servers/$SERVERMASTER/servers/$SERVERNAME/ldapserver ] && DSERVICES=$DSERVICES,ldap
fi
}

function start_table {
TABLECLASS=standard
[ $MOBILE = yes ] && TABLECLASS=mobilestandard

echo "
<input name=\"_SERVERNAME_$SERVERNAME$ALLSERVERS"_"SERVERTYPE"_"$SERVERTYPE"_"SERVERMASTER"_"$SERVERMASTER"_"\" value=\"\" type=\"hidden\">

<table class=\"$TABLECLASS\" style=\"text-align: left;\" border=\"0\" cellpadding=\"2\" cellspacing=\"2\"><tbody><tr>
<td style=\"width: 120px;\"><b>$SERVICEMSG</b></td><td style=\"width: 180px;\"><b>$FUNCTIONMSG</b></td><td><b>$STATUSMSG</b></td></tr>"
}

function show_servername {
echo "<b>"$SERVERNAME $LOCATION_NAME"</b><br><br>"
}


#########################
#Detect if the services are running
########################
function detect_service_status2 {
ACTION=start
ICON=$ICON2
MESSAGE=$STARTSERVICEMSG
FONTCOLOR=#FF0000
#Detect if service is running
if [ $SERVERNAME = $HOSTNAME ]
then
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/$SERVICENAME"_"status 1>/dev/null
else
if [ $SERVERTYPE = network ] || [ $SERVERTYPE = federated ]
then
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
source /opt/karoshi/serversetup/variables/distro
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/'$SERVICENAME'_status 1>/dev/null
'
else
ssh -x -o PasswordAuthentication=no -o ConnectTimeout=4 $SERVERMASTER '
ssh -x -o PasswordAuthentication=no -o ConnectTimeout=4 '$SERVERNAME' '\''
source /opt/karoshi/serversetup/variables/distro
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/'$SERVICENAME'_status 1>/dev/null
'\''
'
fi
fi
if [ `echo $?` = 0 ]
then
ACTION=stop
ICON=$ICON1
MESSAGE=$STOPSERVICEMSG
FONTCOLOR=#11BE26
fi
####################
#Show service details
####################
if [ $COLOURCODE = no ]
then
echo "<tr><td>$SERVICENAME</td><td>$DESCRIPTION</td><td><a class=\"info\" href=\"javascript:void(0)\"><input name=\"_SERVICE_$SERVICENAME"_"ACTION_$ACTION"_"\" type=\"image\" class=\"images\" src=\"$ICON\" value=\"\"><span>$SERVICENAME - $MESSAGE</span></a></td></tr>"
else
echo "<tr><td><FONT COLOR=\"$FONTCOLOR\"><b>$SERVICENAME</b></font></td><td><FONT COLOR=\"$FONTCOLOR\"><b>$DESCRIPTION</b></font></td><td><a class=\"info\" href=\"javascript:void(0)\"><input name=\"_SERVICE_$SERVICENAME"_"ACTION_$ACTION"_"\" type=\"image\" class=\"images\" src=\"$ICON\" value=\"\"><span>$SERVICENAME - $MESSAGE</span></a></td></tr>"
fi
}


function detect_service_status {
if [ $SHOW_SUGGESTED = yes ] && [ `echo $DSERVICES | grep -c -w $SERVICENAME` -gt 0 ]
then
COLOURCODE=yes
detect_service_status2
fi
if [ $SHOW_SUGGESTED = no ] && [ `echo $DSERVICES | grep -c -w $SERVICENAME` = 0 ]
then
COLOURCODE=no
detect_service_status2
fi
}


function check_services {
SERVICENAME=apache
DESCRIPTION=$APACHEDESC
detect_service_status
SERVICENAME=apt-cacher-ng
DESCRIPTION=$APTCACHERDESC
detect_service_status
SERVICENAME=cups
DESCRIPTION=$CUPSDESC
detect_service_status
SERVICENAME=cron
DESCRIPTION=$CRONSDESC
detect_service_status
SERVICENAME=dansguardian
DESCRIPTION=$DANSGUARDIANDESC
detect_service_status
SERVICENAME=dhcp
DESCRIPTION=$DHCPDESC
detect_service_status
SERVICENAME=dns
DESCRIPTION=$DNSDESC
detect_service_status
SERVICENAME=ldap
DESCRIPTION=$LDAPDESC
detect_service_status
SERVICENAME=mailscanner
DESCRIPTION=$MAILSCANNERDESC
detect_service_status
SERVICENAME=mon
DESCRIPTION=$MONDESC
detect_service_status
SERVICENAME=mysql
DESCRIPTION=$MYSQLDESC
detect_service_status
SERVICENAME=nfs
DESCRIPTION=$NFSDESC
detect_service_status
SERVICENAME=nginx
DESCRIPTION=$NGINXDESC
detect_service_status
SERVICENAME=postfix
DESCRIPTION=$POSTFIXDESC
detect_service_status
SERVICENAME=proftpd
DESCRIPTION=$PROFTPDDESC
detect_service_status
SERVICENAME=radius
DESCRIPTION=$RADIUSDESC
detect_service_status
SERVICENAME=samba
DESCRIPTION=$SAMBADESC
detect_service_status
SERVICENAME=squid
DESCRIPTION=$SQUIDDESC
detect_service_status
SERVICENAME=tftpd
DESCRIPTION=$TFTPDESC
detect_service_status
SERVICENAME=xinetd
DESCRIPTION=$XINETDDESC
detect_service_status
}

function end_table {
#End table
echo '</tbody></table><br><br>'
}
if [ $SERVERNAME != allservers ]
then
echo '<form name="myform" action="/cgi-bin/admin/services_view2.cgi" method="post">'
start_table
suggest_services
#Run check_services twice - first run show suggested services
SHOW_SUGGESTED=yes
check_services
SHOW_SUGGESTED=no
check_services
end_table
echo "</form>"
exit
fi

if [ $SERVERNAME = allservers ]
then
ALLSERVERS=showallservers
#Show service status for all network servers
if [ -f /opt/karoshi/server_network/info ]
then
source /opt/karoshi/server_network/info
LOCATION_NAME="- $LOCATION_NAME"
fi
for KAROSHI_SERVER in /opt/karoshi/server_network/servers/*
do
echo '<form name="myform" action="/cgi-bin/admin/services_view2.cgi" method="post">'
SERVERNAME=`basename $KAROSHI_SERVER`
SERVERTYPE=network
show_servername
start_table
suggest_services
#Run check_services twice - first run show suggested services
SHOW_SUGGESTED=yes
check_services
SHOW_SUGGESTED=no
check_services
end_table
echo "</form>"
done

#Show service status for all federated servers
if [ -d /opt/karoshi/server_network/federated_ldap_servers/ ]
then
if [ `ls -1 /opt/karoshi/server_network/federated_ldap_servers/ | wc -l` -gt 0 ]
then
for FEDERATED_SERVERS in /opt/karoshi/server_network/federated_ldap_servers/*
do
FEDERATED_SERVER=`basename $FEDERATED_SERVERS`
if [ -f /opt/karoshi/server_network/federated_ldap_servers/$FEDERATED_SERVER/info ]
then
source /opt/karoshi/server_network/federated_ldap_servers/$FEDERATED_SERVER/info
LOCATION_NAME="- $LOCATION_NAME"
fi
SERVERTYPE=federated
SERVERNAME=$FEDERATED_SERVER
show_servername
start_table
suggest_services
check_services
end_table
for FEDERATED_SLAVE_SERVERS in /opt/karoshi/server_network/federated_ldap_servers/$FEDERATED_SERVER/servers/*
do
FEDERATED_SLAVE_SERVER=`basename $FEDERATED_SLAVE_SERVERS`
if [ $FEDERATED_SLAVE_SERVER != $FEDERATED_SERVER ]
then
SERVERTYPE=federatedslave
SERVERNAME=$FEDERATED_SLAVE_SERVER
SERVERMASTER=$FEDERATED_SERVER
show_servername
start_table
suggest_services
check_services
end_table
fi
done
done
fi
fi


fi
exit






