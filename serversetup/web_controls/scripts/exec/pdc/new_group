#!/bin/bash
#Copyright (C) 2007  The karoshi Team
#This program is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aball@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
[ $LOG_DATE'null' = null ] && exit
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/new_group_cgi
then
echo `date`: new_group - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/new_group_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/new_group.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $new_group_cgi'check' ]
then
echo `date`: new_group - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 1 ]
then
echo `date`: new_group - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo $* | cut -s -d: -f1`
REMOTE_ADDR=`echo $* | cut -s -d: -f2`
REMOTE_MD5=`echo $* | cut -s -d: -f3`
NEWGROUP=`echo $* | cut -s -d: -f4`
########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
echo `date`: new_group - Not called by delete_user.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_USER'null' = null ]
then
echo `date`: new_group - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: new_group - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $NEWGROUP'null' = null ]
then
echo `date`: new_group - Blank group by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit
fi
if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
echo `date`: new_group - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
#######################
#Add the group
#######################
echo `date`: new_group - addding group $NEWGROUP from $REMOTE_ADDR by $REMOTE_USER >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

#Set gidNumber to uidNumber
SAMBADOMAIN=`grep "workgroup =" /etc/samba/smb.conf | sed 's/ //g' | cut -d= -f2 | sed -n 1,1p`
LDAPPASS=`sed -n 1,1p /etc/ldap.secret`
UIDNUMBER=`ldapsearch -x -w $LDAPPASS -D "cn=admin,dc=karoshi,dc=local" sambaDomainName=$SAMBADOMAIN | grep ^uidNumber | cut -d: -f2 | sed 's/ //g'`
echo -e "dn: sambaDomainName=$SAMBADOMAIN,dc=karoshi,dc=local
changetype: modify
replace: gidNumber
gidNumber: $UIDNUMBER
" | ldapmodify -x -D "cn=admin,dc=karoshi,dc=local" -w $LDAPPASS 1>/dev/null
smbldap-groupadd $NEWGROUP 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
#Set SID for the group
GROUP_RID=`getent group $NEWGROUP | cut -d: -f3`
SAMBASID=`net getlocalsid | cut -d: -f2 | sed 's/ //g'`
smbldap-groupmod -s $SAMBASID-$GROUP_RID $NEWGROUP 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

#Set uidNumber to uidNumber+1
let UIDNUMBER=$UIDNUMBER+1
echo -e "dn: sambaDomainName=$SAMBADOMAIN,dc=karoshi,dc=local
changetype: modify
replace: uidNumber
uidNumber: $UIDNUMBER
" | ldapmodify -x -D "cn=admin,dc=karoshi,dc=local" -w $LDAPPASS 1>/dev/null

ADD_GROUP_STATUS=`echo $?`

#Add group to federated server
FEDERATED_LDAP_SERVERS=no
if [ -d /opt/karoshi/server_network/federated_ldap_servers/ ]
then
if [ `ls -1 /opt/karoshi/server_network/federated_ldap_servers/ | wc -l` -gt 0 ]
then
FEDERATED_LDAP_SERVERS=yes
fi
fi

if [ $FEDERATED_LDAP_SERVERS = yes ]
then
ldapsearch -x -w $LDAPPASS -D "cn=admin,dc=karoshi,dc=local" cn=$NEWGROUP > /opt/karoshi/.tempdata/$NEWGROUP.$$.ldif
for FEDERATEDLDAPSERVERS in /opt/karoshi/server_network/federated_ldap_servers/*
do
FEDERATEDLDAPSERVER=`basename $FEDERATEDLDAPSERVERS`
######################
#Export ldif file to add to the federated server
######################
echo `date`: new_group \(federated mode\) - exporting $NEWGROUP to $FEDERATEDLDAPSERVER from $REMOTE_ADDR by $REMOTE_USER >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
scp /opt/karoshi/.tempdata/$NEWGROUP.$$.ldif root@$FEDERATEDLDAPSERVER:"/opt/karoshi/.tempdata/" 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $FEDERATEDLDAPSERVER '
######################
#Import group to federated ldap server
######################
echo `date`: new_group \(federated mode\) - adding '$NEWGROUP' from '$REMOTE_ADDR' by '$REMOTE_USER' >> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
LDAPPASS=`sed -n 1,1p /etc/ldap.secret`
ldapadd -x -D "cn=admin,dc=karoshi,dc=local" -w $LDAPPASS -f /opt/karoshi/.tempdata/'$NEWGROUP'.'$$'.ldif 1>/dev/null
rm -f /opt/karoshi/.tempdata/'$NEWGROUP'.'$$'.ldif
'
done
rm -f /opt/karoshi/.tempdata/$NEWGROUP.$$.ldif
fi

exit $ADD_GROUP_STATUS
