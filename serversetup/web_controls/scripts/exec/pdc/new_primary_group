#!/bin/bash
#Copyright (C) 2011  The karoshi Team
#This program is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aball@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk
LOG_DATE=`date +%F`
[ $LOG_DATE'null' = null ] && exit
########################
#Check md5checksum
########################
if ! test -f /opt/karoshi/web_controls/checksums/admin_checksums/new_primary_group_cgi
then
echo `date`: new_primary_group - No MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
source /opt/karoshi/web_controls/checksums/admin_checksums/new_primary_group_cgi
MD5SUM=`md5sum /var/www/cgi-bin_karoshi/admin/new_primary_group.cgi | cut -d' ' -f1`
[ $MD5SUM'null' = null ] && MD5SUM=not_set
if [ $MD5SUM'check' != $new_primary_group_cgi'check' ]
then
echo `date`: new_primary_group - Incorrect MD5Checksum >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
########################
#Get variables
########################
numArgs=$#
if [ $numArgs != 1 ]
then
echo `date`: new_primary_group - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
REMOTE_USER=`echo $* | cut -s -d: -f1`
REMOTE_ADDR=`echo $* | cut -s -d: -f2`
REMOTE_MD5=`echo $* | cut -s -d: -f3`
NEWPRIGROUP=`echo $* | cut -s -d: -f4`
PROFILE=`echo $* | cut -s -d: -f5`
HOMESERVER=`echo $* | cut -s -d: -f6`
CATEGORY=`echo $* | cut -s -d: -f7`
SECGROUP=`echo $* | cut -s -d: -f8`

########################
#Check data
########################
if [ $REMOTE_MD5'check' != $MD5SUM'check' ]
then
echo `date`: new_primary_group - Not called by delete_user.cgi >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_USER'null' = null ]
then
echo `date`: new_primary_group - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: new_primary_group - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $NEWPRIGROUP'null' = null ]
then
echo `date`: new_primary_group - Blank group by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $PROFILE'null' = null ]
then
echo `date`: new_primary_group - Blank profile by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $HOMESERVER'null' = null ]
then
echo `date`: new_primary_group - Blank home server by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $CATEGORY'null' = null ]
then
echo `date`: new_primary_group - Blank home server by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ `grep -c ^$REMOTE_USER: /opt/karoshi/web_controls/web_access_admin` != 1 ]
then
echo `date`: new_primary_group - access denied to $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

########################
#Check for federated servers
########################
FAILED_SERVER=no
SLAVE_LDAP_SERVERS=no
if [ -d /opt/karoshi/server_network/slave_ldap_servers/ ]
then
if [ `ls -1 /opt/karoshi/server_network/slave_ldap_servers/ | wc -l` -gt 0 ]
then
SLAVE_LDAP_SERVERS=yes
fi
fi

FEDERATED_LDAP_SERVERS=no
if [ -d /opt/karoshi/server_network/federated_ldap_servers/ ]
then
if [ `ls -1 /opt/karoshi/server_network/federated_ldap_servers/ | wc -l` -gt 0 ]
then
FEDERATED_LDAP_SERVERS=yes
fi
fi

#######################
#Add the group
#######################
echo `date`: new_primary_group - addding group $NEWPRIGROUP from $REMOTE_ADDR by $REMOTE_USER >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

[ ! -d /opt/karoshi/server_network/group_information/optional_groups ] && mkdir -p /opt/karoshi/server_network/group_information/optional_groups

touch /opt/karoshi/server_network/group_information/optional_groups/$NEWPRIGROUP

#Set gidNumber to uidNumber
SAMBADOMAIN=`grep "workgroup =" /etc/samba/smb.conf | sed 's/ //g' | cut -d= -f2 | sed -n 1,1p`
LDAPPASS=`sed -n 1,1p /etc/ldap.secret`
UIDNUMBER=`ldapsearch -x -w $LDAPPASS -D "cn=admin,dc=karoshi,dc=local" sambaDomainName=$SAMBADOMAIN | grep ^uidNumber | cut -d: -f2 | sed 's/ //g'`
echo -e "dn: sambaDomainName=$SAMBADOMAIN,dc=karoshi,dc=local
changetype: modify
replace: gidNumber
gidNumber: $UIDNUMBER
" | ldapmodify -x -D "cn=admin,dc=karoshi,dc=local" -w $LDAPPASS 1>/dev/null
smbldap-groupadd $NEWPRIGROUP 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
#Set SID for the group
GROUP_RID=`getent group $NEWPRIGROUP | cut -d: -f3`
SAMBASID=`net getlocalsid | cut -d: -f2 | sed 's/ //g'`
smbldap-groupmod -s $SAMBASID-$GROUP_RID $NEWPRIGROUP 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE

#Set uidNumber to uidNumber+1
let UIDNUMBER=$UIDNUMBER+1
echo -e "dn: sambaDomainName=$SAMBADOMAIN,dc=karoshi,dc=local
changetype: modify
replace: uidNumber
uidNumber: $UIDNUMBER
" | ldapmodify -x -D "cn=admin,dc=karoshi,dc=local" -w $LDAPPASS 1>/dev/null

let UIDNUMBER=$UIDNUMBER-1


###########################
#Create a sub domain for users of the group
###########################
#Main server
#ldapadd -x -D "cn=admin,dc=karoshi,dc=local" -w $LDAPPASS -f /opt/karoshi/.tempdata/$NEWUSERNAME.$$.ldif 1>/dev/null

echo -e "dn: ou=$NEWPRIGROUP,ou=$CATEGORY,ou=People,dc=karoshi,dc=local
objectClass: organizationalUnit
objectClass: top
ou: $CATEGORY" | ldapadd -x -D "cn=admin,dc=karoshi,dc=local" -w $LDAPPASS 1>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE 2>> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
#Create group and sub domain on federated servers and slave ldap servers
if [ $SLAVE_LDAP_SERVERS = yes ]
then
for SLAVELDAPSERVERS in /opt/karoshi/server_network/slave_ldap_servers/*
do
SLAVELDAPSERVER=`basename $SLAVELDAPSERVERS`
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SLAVELDAPSERVER '
LDAPPASS=`sed -n 1,1p /etc/ldap.secret`
echo -e "dn: ou='$NEWPRIGROUP',ou='$CATEGORY',ou=People,dc=karoshi,dc=local
objectClass: organizationalUnit
objectClass: top
ou: '$CATEGORY'" | ldapadd -x -D "cn=admin,dc=karoshi,dc=local" -w $LDAPPASS 1>/dev/null

#Create group
SAMBASID=`net getlocalsid | cut -d: -f2 | sed "s/ //g"`
smbldap-groupadd -g '$GROUP_RID' '$NEWPRIGROUP'
smbldap-groupmod -s $SAMBASID'-$GROUP_RID' '$NEWPRIGROUP' 1>/dev/null
'
done
fi

if [ $FEDERATED_LDAP_SERVERS = yes ]
then
for FEDERATEDLDAPSERVERS in /opt/karoshi/server_network/federated_ldap_servers/*
do
FEDERATEDLDAPSERVER=`basename $FEDERATEDLDAPSERVERS`
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $FEDERATEDLDAPSERVER '
LDAPPASS=`sed -n 1,1p /etc/ldap.secret`
echo -e "dn: ou='$NEWPRIGROUP',ou='$CATEGORY',ou=People,dc=karoshi,dc=local
objectClass: organizationalUnit
objectClass: top
ou: '$CATEGORY'" | ldapadd -x -D "cn=admin,dc=karoshi,dc=local" -w $LDAPPASS 1>> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE' 2>> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'
#Create group
SAMBASID=`net getlocalsid | cut -d: -f2 | sed "s/ //g"`
smbldap-groupadd -g '$GROUP_RID' '$NEWPRIGROUP'
smbldap-groupmod -s $SAMBASID'-$GROUP_RID' '$NEWPRIGROUP' 1>> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE' 2>> /opt/karoshi/logs/karoshi_web_management/'$LOG_DATE'

#Create group and subdomain on slave ldap servers in this federated location



if [ -d /opt/karoshi/server_network/slave_ldap_servers/ ]
then
if [ `ls -1 /opt/karoshi/server_network/slave_ldap_servers/ | wc -l` -gt 0 ]
then
for SLAVELDAPSERVERS in /opt/karoshi/server_network/slave_ldap_servers/*
do
SLAVELDAPSERVER=`basename $SLAVELDAPSERVERS`
ssh -x -o PasswordAuthentication=no -o ConnectTimeout=3 $SLAVELDAPSERVER '\''
LDAPPASS=`sed -n 1,1p /etc/ldap.secret`
echo -e "dn: ou='$NEWPRIGROUP',ou='$CATEGORY',ou=People,dc=karoshi,dc=local
objectClass: organizationalUnit
objectClass: top
ou: '$CATEGORY'" | ldapadd -x -D "cn=admin,dc=karoshi,dc=local" -w $LDAPPASS 1>/dev/null

#Create group
SAMBASID=`net getlocalsid | cut -d: -f2 | sed "s/ //g"`
smbldap-groupadd -g '$GROUP_RID' '$NEWPRIGROUP'
smbldap-groupmod -s $SAMBASID-'$GROUP_RID' '$NEWPRIGROUP' 1>/dev/null
'\''
done

fi
fi
'
done
fi


##########################
#Copy profile and background
##########################
#Main server
if [ ! -d /home/applications/profiles/$NEWPRIGROUP ]
then
cp -f -R /home/applications/profiles/$PROFILE /home/applications/profiles/$NEWPRIGROUP 
chmod 0644 /home/applications/profiles/$NEWPRIGROUP
chmod u+X,g+X,o+X /home/applications/profiles/$NEWPRIGROUP
ln -s /home/applications/profiles/$NEWPRIGROUP /home/applications/profiles/$NEWPRIGROUP.V2
fi

[ -f /home/applications/backgrounds/$PROFILE.bmp ] && cp -f /home/applications/backgrounds/$PROFILE.bmp /home/applications/backgrounds/$NEWPRIGROUP.bmp

#Copy profile on federated servers
if [ $FEDERATED_LDAP_SERVERS = yes ]
then
for FEDERATEDLDAPSERVERS in /opt/karoshi/server_network/federated_ldap_servers/*
do
FEDERATEDLDAPSERVER=`basename $FEDERATEDLDAPSERVERS`
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $FEDERATEDLDAPSERVER '
if [ ! -d /home/applications/profiles/'$NEWPRIGROUP' ]
then
cp -f -R /home/applications/profiles/'$PROFILE' /home/applications/profiles/'$NEWPRIGROUP' 
chmod 0644 /home/applications/profiles/'$NEWPRIGROUP'
chmod u+X,g+X,o+X /home/applications/profiles/'$NEWPRIGROUP'
fi
[ -f /home/applications/backgrounds/'$PROFILE'.bmp ] && cp -f /home/applications/backgrounds/'$PROFILE'.bmp /home/applications/backgrounds/'$NEWPRIGROUP'.bmp
'
done
fi

##########################
#Create data files
##########################
[ -e /var/lib/samba/netlogon/windows_settings/drives/$PROFILE.kix ] && cp -f /var/lib/samba/netlogon/windows_settings/drives/$PROFILE.kix /var/lib/samba/netlogon/windows_settings/drives/$NEWPRIGROUP.kix
[ -e /var/lib/samba/netlogon/windows_settings/security/$PROFILE.kix ] && cp -f /var/lib/samba/netlogon/windows_settings/security/$PROFILE.kix /var/lib/samba/netlogon/windows_settings/security/$NEWPRIGROUP.kix
[ `grep -c $NEWPRIGROUP /var/lib/samba/netlogon/groups.txt` = 0 ] && echo $NEWPRIGROUP,$HOMESERVER >> /var/lib/samba/netlogon/groups.txt
echo SERVER=$HOMESERVER > /opt/karoshi/server_network/group_information/$NEWPRIGROUP
echo HOMEPATH=/home/users/$CATEGORY/$PRIGROUP >> /opt/karoshi/server_network/group_information/$NEWPRIGROUP
echo SUBUNIT=$CATEGORY >> /opt/karoshi/server_network/group_information/$NEWPRIGROUP
echo SECONDARYGROUP=$SECGROUP >> /opt/karoshi/server_network/group_information/$NEWPRIGROUP
echo YEARSUFFIX=$YEARSUFFIX >> /opt/karoshi/server_network/group_information/$NEWPRIGROUP
#Create data file on federated servers
if [ $FEDERATED_LDAP_SERVERS = yes ]
then
for FEDERATEDLDAPSERVERS in /opt/karoshi/server_network/federated_ldap_servers/*
do
FEDERATEDLDAPSERVER=`basename $FEDERATEDLDAPSERVERS`
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $FEDERATEDLDAPSERVER '
[ -e /var/lib/samba/netlogon/windows_settings/drives/'$PROFILE'.kix ] && cp -f /var/lib/samba/netlogon/windows_settings/drives/'$PROFILE'.kix /var/lib/samba/netlogon/windows_settings/drives/'$NEWPRIGROUP'.kix
[ -e /var/lib/samba/netlogon/windows_settings/security/'$PROFILE'.kix ] && cp -f /var/lib/samba/netlogon/windows_settings/security/'$PROFILE'.kix /var/lib/samba/netlogon/windows_settings/security/'$NEWPRIGROUP'.kix
[ `grep -c '$NEWPRIGROUP' /var/lib/samba/netlogon/groups.txt` = 0 ] && echo '$NEWPRIGROUP',$HOSTNAME >> /var/lib/samba/netlogon/groups.txt
echo SERVER=$HOSTNAME > /opt/karoshi/server_network/group_information/'$NEWPRIGROUP'
echo HOMEPATH=/home/users/'$CATEGORY'/'$PRIGROUP' >> /opt/karoshi/server_network/group_information/'$NEWPRIGROUP'
echo SUBUNIT='$CATEGORY' >> /opt/karoshi/server_network/group_information/'$NEWPRIGROUP'
echo SECONDARYGROUP='$SECGROUP' >> /opt/karoshi/server_network/group_information/'$NEWPRIGROUP'
echo YEARSUFFIX='$YEARSUFFIX' >> /opt/karoshi/server_network/group_information/'$NEWPRIGROUP'
'
done
fi
exit

