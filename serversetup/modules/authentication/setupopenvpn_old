#!/bin/bash

#Copyright (C) 2013  Paul Sharrad
#This program is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#
#Website: http://www.linuxschools.com

clear

LOG_DATE=`date +%F`
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: configure_authentication - incorrect number of arguments."<br>"
exit 101
fi
read -t 3 DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-/'`

REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
SERVERNAME=`echo "$DATA" | cut -s -d: -f4`

if [ -z "$REMOTE_USER" ]
then
echo `date`: configure_authentication - Blank remote user."<br>"
echo `date`: configure_authentication - Blank remote user from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
sleep 2
exit 101
fi
if [ -z "$REMOTE_ADDR" ]
then
echo `date`: configure_authentication - Blank remote tcpip address."<br>"
echo `date`: configure_authentication - Blank remote tcpip address by $REMOTE_USER >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
sleep 2
exit 101
fi
if [ -z "$SERVERNAME" ]
then
echo `date`: configure_authentication - Blank servername."<br>"
echo `date`: configure_authentication - Blank servername by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
sleep 2
exit 101
fi

#Create secret password to use with certificates

if [ ! -f /etc/openvpn/openvpn.secret ]
then
touch /etc/openvpn/openvpn.secret
chmod 0600 /etc/openvpn/openvpn.secret
RANGE=61
COUNTER=1
while [ $COUNTER -lt 16 ]
do
row[$COUNTER]=$RANDOM
let "row[$COUNTER] %= $RANGE"
while [ ${row[$COUNTER]} = 0 ]
do
row[$COUNTER]=$RANDOM
let "row[$COUNTER] %= $RANGE"
done
CHARACTER[$COUNTER]=`sed -n ${row[$COUNTER]},1p /opt/karoshi/serversetup/pdc/"useful scripts"/.alphabet`
let COUNTER=COUNTER+1
done
OPENVPNPASS=`echo ${CHARACTER[@]:0} | sed 's/ //g'`
echo $OPENVPNPASS > /etc/openvpn/openvpn.secret
fi
#Get openvpn password
OPENVPNPASS=`sed -n 1,1p /etc/openvpn/openvpn.secret`

LANGCHOICE=englishuk
source /opt/karoshi/serversetup/language/$LANGCHOICE/modules/authentication/authentication

echo "<li><b>"$VPNTITLE"</b></li><br>"

if [ ! -d /etc/openvpn/easy-rsa ]
then
mkdir /etc/openvpn/easy-rsa
cp -r /usr/share/doc/openvpn/examples/easy-rsa/2.0/* /etc/openvpn/easy-rsa
fi

if [ ! -f /etc/openvpn/easy-rsa/openssl.cnf ]
then
cp /etc/openvpn/easy-rsa/openssl-1.0.0.cnf /etc/openvpn/easy-rsa/openssl.cnf
fi

#Allow keys to be regenerated
echo unique_subject = no > /etc/openvpn/easy-rsa/keys/index.txt.attr

#Squirt data into cert generators
function pipe_data {
echo -e ""US"\n"Karoshi"\n"Karoshi"\n"Karoshi"\n"$SERVER"\n"$SERVER"\n"$SERVER"\n"$SERVER@$REALM"\n"$OPENVPNPASS"\n"Karoshi"\n"
sleep 1
echo -e ""y"\n"y"\n"
}

cd /etc/openvpn/easy-rsa
source /opt/karoshi/server_network/domain_information/domain_name
source /opt/karoshi/serversetup/variables/distro
PDCIP=`net lookup $HOSTNAME`
PORTCHECK=1194
source vars 1>/dev/null


MODCHECK=0
if [ `grep -c -w tun0 /etc/shorewall/interfaces` = 0 ]
then
#Configure shorewall for tun0
LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/interfaces | cut -d: -f1`
sed -i $LINENUM"c"\net"	"tun0"	"detect /etc/shorewall/interfaces
echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/interfaces
MODCHECK=1
fi

#Make sure that shorewall port is open for vpn

if [ `grep -c -w vpn_rule /etc/shorewall/rules` = 0 ]
then
LINENUM=`grep -n 'LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE' /etc/shorewall/rules | cut -d: -f1`
sed -i $LINENUM'c'\ACCEPT'	'net'	'fw'	'udp'	'1194'	'-'#'vpn_rule /etc/shorewall/rules
echo '#'LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
MODCHECK=1
fi

if [ $MODCHECK = 1 ]
then
#Restart shorewall
echo "<li>"$RESTARTSWMSG"</li>"
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop
echo "<br><br>"
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start
echo "<br><br>"
fi

#Generate master certificate authority and key
if [ ! -f /etc/openvpn/$HOSTNAME.key ] || [ ! -f /etc/openvpn/$HOSTNAME.crt ] || [ ! -f /etc/openvpn/ca.crt ] || [ ! -f /etc/openvpn/dh1024.pem ]
then
echo "<li>$GENKEYSMSG1</li>"

./clean-all
echo -e ""US"\n"Karoshi"\n"Karoshi"\n"Karoshi"\n"$HOSTNAME"\n"$HOSTNAME"\n"$HOSTNAME@$REALM"\n" | ./build-ca

#Build Server Certificates
echo "<li>$GENKEYSMSG2</li>"
SERVER=$HOSTNAME
pipe_data | ./build-key-server $HOSTNAME

#Generate Diffie Hellmam parameters
echo "<li>$GENKEYSMSG3</li>"
./build-dh

#Copy keys to /etc/openvpn
echo "<li>Copying keys to /etc/openvpn</li>"
cp /etc/openvpn/easy-rsa/keys/$HOSTNAME.key /etc/openvpn/
cp /etc/openvpn/easy-rsa/keys/$HOSTNAME.crt /etc/openvpn/
cp /etc/openvpn/easy-rsa/keys/ca.crt /etc/openvpn/
cp /etc/openvpn/easy-rsa/keys/dh1024.pem /etc/openvpn/
fi

#Configure openvpn server
if [ ! -f /etc/openvpn/server.conf ]
then
cp /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz /etc/openvpn/
gzip -d /etc/openvpn/server.conf.gz

sed -i 's/^cert server.crt/cert '$HOSTNAME.crt'/g' /etc/openvpn/server.conf
sed -i 's/^key server.key/key '$HOSTNAME.key'/g' /etc/openvpn/server.conf

#Restart service
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/openvpn_stop 1>/dev/null
sleep 1
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/openvpn_start
#Make sure service runs on boot
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/openvpn
fi


#Check that the client can connect to the main server on port 1194 udp
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
echo "<li>"'$PORTCHECKMSG': '$PORTCHECK'"</li>"
SCANRESULT=`nmap '$PDCIP' -p '$PORTCHECK' -PN`
for PORT in `echo '$PORTCHECK' | sed "s/,/ /g"`
do
[ `echo $SCANRESULT | grep -c "$PORT/tcp"` = 0 ] && exit $PORT
exit 0
done
'
EXITCHECK=`echo $?`

if [ $EXITCHECK != 0 ]
then
echo `date`: setupopenvpn - Error connecting to $HOSTNAME on port $EXITCHECK "for" $SERVERNAME by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
echo '<li>'$CONNECTIONERRORMSG -  $PDCIP: $EXITCHECK '</li><br>'
sleep 4
exit $EXITCHECK
fi

#Create client certificates
echo "<li>$SERVERNAME - $GENCLIENTCERTMSG</li>"
SERVER=$SERVERNAME
pipe_data | ./build-key $SERVERNAME
#Copy client certificates to the server
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
[ ! -d /etc/openvpn ] && mkdir -p /etc/openvpn
[ -f /etc/openvpn/easy-rsa/keys/'$SERVERNAME'.crt ] && rm -f /etc/openvpn/easy-rsa/keys/'$SERVERNAME'.crt
[ -f /etc/openvpn/easy-rsa/keys/'$SERVERNAME'.key ] && rm -f /etc/openvpn/easy-rsa/keys/'$SERVERNAME'.key
[ -f /etc/openvpn/easy-rsa/keys/ca.crt ] && rm -f /etc/openvpn/easy-rsa/keys/ca-crt
'

scp /etc/openvpn/ca.crt root@$SERVERNAME:"/etc/openvpn/"
scp /etc/openvpn/easy-rsa/keys/$SERVERNAME.crt root@$SERVERNAME:"/etc/openvpn/"
scp /etc/openvpn/easy-rsa/keys/$SERVERNAME.key root@$SERVERNAME:"/etc/openvpn/"

rm -f /etc/openvpn/easy-rsa/keys/$SERVERNAME.crt
rm -f /etc/openvpn/easy-rsa/keys/$SERVERNAME.key

#Configure client for openvpn
ssh -o PasswordAuthentication=no -o ConnectTimeout=3 $SERVERNAME '
source /opt/karoshi/serversetup/variables/distro
#Configure shorewall for tun0
if [ `grep -c -w tun0 /etc/shorewall/interfaces` = 0 ]
then
LINENUM=`grep -n "LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE" /etc/shorewall/interfaces | cut -d: -f1`
sed -i $LINENUM"c"\net"	"tun0"	"detect /etc/shorewall/interfaces
echo "#"LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/interfaces
#Restart shorewall
echo "<li>"'$RESTARTSWMSG'"</li>"
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop
echo "<br><br>"
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start
echo "<br><br>"
fi

if [ ! -f /etc/openvpn/client.conf ]
then
cp /usr/share/doc/openvpn/examples/sample-config-files/client.conf /etc/openvpn/

sed -i "s/^cert client.crt/cert $HOSTNAME.crt/g" /etc/openvpn/client.conf
sed -i "s/^key client.key/key $HOSTNAME.key/g" /etc/openvpn/client.conf
sed -i "s/^remote my-server-1 1194/remote '$PDCIP' 1194/g" /etc/openvpn/client.conf
fi
#Restart openvpn client
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/openvpn_stop 1>/dev/null
sleep 1
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/openvpn_start
#Make sure service runs on boot
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/openvpn

sleep 2

#Check that tunnel is up - this can take some time
COUNTER=1
while [ $COUNTER -lt 15 ]
do
echo "<li>"'$SERVERNAME' - '$CHECKTUNNELMSG' - '$CHECKTUNNELMSG' $COUNTER"</li><br>"
[ `ifconfig | grep -c tun0` -gt 0 ] && break
sleep 1
let COUNTER=$COUNTER+1
done
[ `ifconfig | grep -c tun0` = 0 ] && exit 105

#Check that tunnel is connected
ping -c1 10.8.0.1 1>/dev/null
[ `echo $?` != 0 ] && exit 106

'
EXITCHECK=`echo $?`

if [ $EXITCHECK = 105 ]
then
echo `date`: setupopenvpn - openvpn tunnel is down "for"  $SERVERNAME  by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
echo "<li>"$SERVERNAME - $VPNERROR1"</li><br>"
sleep 4
exit $EXITCHECK
fi

if [ $EXITCHECK = 106 ]
then
echo `date`: setupopenvpn - cannot "ping" $PDCIP from  $SERVERNAME  by $REMOTE_USER from $REMOTE_ADDR >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
echo '<li>'$SERVERNAME' - cannot ping '$PDCIP' through the vpn link</li><br>'
sleep 4
exit $EXITCHECK
fi

