#!/bin/bash
#setupemail
#Copyright (C) 2005 Paul Sharrad
#This program is free software; you can redistribute it and/or
#modify it under the terms of the GNU General Public License
#as published by the Free Software Foundation; either version 2
#of the License, or (at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
#The Karoshi Team can be contacted at: 
#mpsharrad@karoshi.org.uk
#jharris@karoshi.org.uk
#aball@karoshi.org.uk
#
#Website: http://www.karoshi.org.uk

########################
#Get variables
########################
LOG_DATE=`date +%F`
numArgs=$#
if [ $numArgs != 0 ]
then
echo `date`: setupemail - incorrect number of arguments"<br>"
echo `date`: setupemail - incorrect number of arguments >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
read -t 3 DATA
DATA=`echo $DATA | tr -cd 'A-Za-z0-9\._:\-/'`

REMOTE_USER=`echo "$DATA" | cut -s -d: -f1`
REMOTE_ADDR=`echo "$DATA" | cut -s -d: -f2`
REMOTE_MD5=`echo "$DATA" | cut -s -d: -f3`
EMAILDOMAIN=`echo "$DATA" | cut -s -d: -f4-`
LOG_DATE=`date +%F`
if [ $REMOTE_USER'null' = null ]
then
echo `date`: setupemail - Blank remote user"<br>"
echo `date`: setupemail - Blank remote user >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $REMOTE_ADDR'null' = null ]
then
echo `date`: setupemail - Blank remote tcpip address"<br>"
echo `date`: setupemail - Blank remote tcpip address >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi
if [ $EMAILDOMAIN'null' = null ]
then
echo `date`: setupemail - Blank email domain"<br>"
echo `date`: setupemail - Blank email domain >> /opt/karoshi/logs/karoshi_web_management/$LOG_DATE
exit 101
fi

[ -d /opt/karoshi/.tempdata ] || mkdir /opt/karoshi/.tempdata
[ -d /var/www/html ] || mkdir -p /var/www/html
[ ! -e /opt/karoshi/.tempdata/mysqlpasswordstatus ] || rm -f /opt/karoshi/.tempdata/mysqlpasswordstatus

LANGCHOICE=englishuk
[ -f /opt/karoshi/web_controls/language/$LANGCHOICE/modules/email/setupemail ] || LANGCHOICE=englishuk
source /opt/karoshi/serversetup/language/$LANGCHOICE/modules/email/setupemail
source /opt/karoshi/serversetup/variables/distro
source /opt/karoshi/serversetup/distro/$DISTROCHOICE/all/software

#############################
#Check for missing software
#############################
if [ -f /opt/karoshi/serversetup/distro/$DISTROCHOICE/modules/email/software ]
then
/opt/karoshi/serversetup/distro/$DISTROCHOICE/modules/email/software
fi
#############################
#Ensure that apache, mailscanner, postfix, mysql, clamd and mailscanner are running on boot
#############################
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/apache
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/postfix
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/mailscanner
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/clamd
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/imap
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/mysql
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/startonboot/dovecot

#Merge postfix keytab into mail keytab
echo -e "rkt /etc/keytabs/postfix.keytab\nwkt /etc/keytab/mail.keytab\nexit" | ktutil 1>/dev/null

function passgen {
PASSCHOICE=( A B C D E F G H I J K L M N O P Q R S T U V W X Y Z a b c d e f g h i j k l m n o p q r s t u v w x y x 1 2 3 4 5 6 7 8 9 0 )

RANGE=`echo ${#PASSCHOICE[@]}`
let RANGE=$RANGE-1 

COUNTER=1
while [ $COUNTER -le 16 ]
do
ARRAYCHOICE=$RANDOM
let "ARRAYCHOICE %= $RANGE"
PASSWORD[$COUNTER]=`echo ${PASSCHOICE[$ARRAYCHOICE]} `
let COUNTER=COUNTER+1
done
}

#####################
#Install email
#####################
echo '<li>'$POSTFIXMSG'</li><br>'

#######################
#Apply certificate
#######################
if [ ! -f /etc/ssl/apache/server.crt ]
then
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/apachesslcert
fi

########################
#Make sure that there is a Mail Scanner whitelist
########################
if [ ! -f /etc/MailScanner/rules/spam.whitelist.rules ]
then
echo From:'           '127.0.0.1'      'yes > /etc/MailScanner/rules/spam.whitelist.rules
echo FromOrTo:'       'default'        'no >> /etc/MailScanner/rules/spam.whitelist.rules
fi
########################
#Change postfix path
########################
[ -d /opt/postfix ] && rm -f -R /opt/postfix
[ -d /opt/postfix ] || mkdir /opt/postfix
chmod 0700 /opt/postfix
chown postfix /opt/postfix 1>/dev/null
usermod -d /opt/postfix -m postfix

########################
#Setup postfix
########################
chmod 0644 /opt/karoshi/serversetup/modules/email/postfix/*
cp -f /opt/karoshi/serversetup/distro/$DISTROCHOICE/modules/email/postfix/* /etc/postfix/
cp /opt/karoshi/serversetup/modules/email/postfix/* /etc/postfix/
chmod 0644 /etc/postfix/main.cf
chmod 0644 /etc/postfix/master.cf

########################
#Setup dovecot
########################
if [ `grep -c ^mail_location /etc/dovecot/dovecot.conf` = 0 ]
then
echo >> /etc/dovecot/dovecot.conf
echo mail_location = maildir:/home/users/email/"%u"/ >> /etc/dovecot/dovecot.conf
fi
if [ `grep -c ^set_maildir_very_dirty_syncs /etc/dovecot/dovecot.conf` = 0 ]
then
echo >> /etc/dovecot/dovecot.conf
echo -e "maildir_very_dirty_syncs = yes\n\n" >> /etc/dovecot/dovecot.conf
fi

if [ `grep -c ^"#kerberos auth and sasl" /etc/dovecot/dovecot.conf` = 0 ]
then
echo '#kerberos auth and sasl
auth_mechanisms = plain gssapi

auth_krb5_keytab = /etc/keytabs/mail.keytab

passdb {
  driver = pam
}

userdb {
  driver = passwd
}

service auth {

  unix_listener /var/spool/postfix/private/auth {
    mode = 0660
    # Assuming the default Postfix user and group
    user = postfix
    group = postfix        
  }
}' >> /etc/dovecot/dovecot.conf
fi

#Configure ssl for dovecot
echo 'ssl_cert = </etc/ssl/mail/dovecot.pem' > /etc/dovecot/conf.d/10-ssl.conf
echo 'ssl_key = </etc/ssl/mail/dovecot.key' >> /etc/dovecot/conf.d/10-ssl.conf

#Create folders for existing accounts
[ ! -d /home/users/email ] && mkdir -p /home/users/email
for USERINFO in `getent passwd | cut -d: -f1-3`
do
MAILUSER=`echo $USERINFO | cut -d: -f1`
MAILUSERID=`echo $USERINFO | cut -d: -f3`
if [ $MAILUSERID -ge 1000 ]
then
if [ ! -d /home/users/email/$MAILUSER ]
then
mkdir /home/users/email/$MAILUSER
chmod 0700 /home/users/email/$MAILUSER
chown $MAILUSER /home/users/email/$MAILUSER
fi
fi
done

########################
#Modify postfix main.cf
########################

LINENUM=`grep -n myhostname' '= /etc/postfix/main.cf | cut -d: -f1`
if [ `echo $EMAILDOMAIN | grep -cw mail` = 0 ]
then
sed -i $LINENUM'c'\myhostname' '=' 'mail.$EMAILDOMAIN /etc/postfix/main.cf
else
sed -i $LINENUM'c'\myhostname' '=' '$EMAILDOMAIN /etc/postfix/main.cf
fi

LINENUM=`grep -n mydomain' '= /etc/postfix/main.cf | cut -d: -f1`
sed -i $LINENUM'c'\mydomain' '=' '$EMAILDOMAIN /etc/postfix/main.cf

LINENUM=`grep -n masquerade_domains' '= /etc/postfix/main.cf | cut -d: -f1`
sed -i $LINENUM'c'\masquerade_domains' '=' '$EMAILDOMAIN /etc/postfix/main.cf

########################
#Set mailname
########################
echo $EMAILDOMAIN > /etc/mailname

########################
#Configure mailscanner
########################

echo '<li>'$MAILSCANNERMSG'</li><br>'

[ -f /etc/MailScanner/MailScanner.conf ] && mv /etc/MailScanner/MailScanner.conf /etc/MailScanner/MailScannerold.conf
cp -f /opt/karoshi/serversetup/distro/$DISTROCHOICE/modules/mailscanner/* /etc/MailScanner/
#cp -f /opt/karoshi/serversetup/distro/$DISTROCHOICE/modules/cron_hourly/check_MailScanner /etc/cron.hourly/

[ -d /var/spool/MailScanner/spamassassin ] || mkdir -p /var/spool/MailScanner/spamassassin
[ -d /var/spool/MailScanner/incoming ] || mkdir -p /var/spool/MailScanner/incoming
[ -d /var/spool/MailScanner/quarantine ] || mkdir -p /var/spool/MailScanner/quarantine
chown $MAILUSER.$MAILGROUP /var/spool/MailScanner/spamassassin 1>/dev/null
chown $MAILUSER.$MAILGROUP /var/spool/MailScanner/incoming 1>/dev/null
chown $MAILUSER.$MAILGROUP /var/spool/MailScanner/quarantine 1>/dev/null
[ -f /etc/default/mailscanner ] && echo run_mailscanner=1 >> /etc/default/mailscanner

########################
#Ensure htaccess is enabled
########################
/opt/karoshi/serversetup/scripts/apache_htaccess
########################
#Create required folders for squirrelmail
########################

echo '<li>'$SQUIRRELMSG'</li><br>'

[ -d /var/www/squirrelmail-data ] || mkdir /var/www/squirrelmail-data
[ -d /var/www/squirrelmail-attachments ] || mkdir /var/www/squirrelmail-attachments
[ -d /var/www/squirrelmail-datacalendar_data ] || mkdir /var/www/squirrelmail-datacalendar_data

chmod 0755 /var/www/squirrelmail-data 1>/dev/null
chown -c -R $APACHEUSER.$APACHEGROUP /var/www/squirrelmail-data 1>/dev/null
chmod 730 /var/www/squirrelmail-attachments
chown -c -R root.$APACHEGROUP /var/www/squirrelmail-attachments 1>/dev/null
chmod 0750 /var/www/squirrelmail-datacalendar_data
chown -c $APACHEUSER.$APACHEGROUP /var/www/squirrelmail-datacalendar_data 1>/dev/null

########################
#Copy in scripts
########################
cp -f /opt/karoshi/serversetup/modules/email/scripts/* /opt/karoshi/"useful scripts"/

########################
#Copy in squirrelmail files to /var/www/html/squirrelmail
#######################

cp -f -R /opt/karoshi/serversetup/modules/email/squirrelmail.tar.gz /var/www/html/
cd /var/www/html/
[ -d /var/www/html/squirrelmail ] && mv /var/www/html/squirrelmail /var/www/html/squirrelmail.$$
#Extract squirrelmail
tar -zxf squirrelmail.tar.gz
rm -f /var/www/html/squirrelmail.tar.gz

LINENUM=`grep -n domain'                 '= /var/www/html/squirrelmail/config/config.php | cut -d: -f1`
sed -i $LINENUM'c'\$domain'                 '=' '"'"$EMAILDOMAIN"'"';' /var/www/html/squirrelmail/config/config.php
chown -c -R root.$APACHEGROUP /var/www/html/squirrelmail 1>/dev/null
chmod 0440 -R /var/www/html/squirrelmail
chmod u+X,g+X -R /var/www/html/squirrelmail
#######################
#Copy in calendar admin data to /opt/karoshi
#######################
cp -f -R /opt/karoshi/serversetup/modules/email/squirrelmaildata /opt/karoshi
chmod 0600 -R /opt/karoshi/squirrelmaildata
chmod u+X -R /opt/karoshi/squirrelmaildata
chown root.root -R /opt/karoshi/squirrelmaildata 1>/dev/null
#######################
#Copy in alias data to /opt/karoshi
#######################
cp -f -R /opt/karoshi/serversetup/modules/email/postfixdata /opt/karoshi
chmod 0644 -R /opt/karoshi/postfixdata
chmod u+X,g+X,o+X -R /opt/karoshi/postfixdata
chown root.root -R /opt/karoshi/postfixdata 1>/dev/null
#######################
#Create a cron job to tidy up attachments directory
#######################
[ -d /opt/karoshi/cronjobs/jobs ] || mkdir -p /opt/karoshi/cronjobs/jobs
echo 0 5 '*' '*' '*' rm -f /var/www/squirrelmail-attachments/'*' > /opt/karoshi/cronjobs/jobs/tidy_squirrelmail_attachments.cron

#######################
#Create a cron job to run mailbox size checks
#######################
echo 0 1,9,17 '*' '*' '*' /opt/karoshi/'"'useful scripts'"'/mailboxcheck > /opt/karoshi/cronjobs/jobs/mailboxcheck.cron
#######################
#Create a cron job to run postfix stats
#######################
echo 55 23 '*' '*' '*' /opt/karoshi/'"'useful scripts'"'/postfixstats > /opt/karoshi/cronjobs/jobs/postfixstats.cron
#######################
#Create a cron job create the global address book
#######################
#echo 0 20 '*' '*' '*' /opt/karoshi/'"'useful scripts'"'/gen_global_addressbook > /opt/karoshi/cronjobs/jobs/globaladdressbook.cron
#Create global address_book
#/opt/karoshi/"useful scripts"/gen_global_addressbook
#######################
#Refresh cronjobs
#######################
/opt/karoshi/serversetup/all/"useful scripts"/refreshcronjobs 1>/dev/null
########################
#Copy in egroupware files
########################
echo '<li>'$EGROUPWAREMSG'</li><br>'
#####################
#Create egroupware mysql password for the new database
#####################
echo '<li>'$MYSQLMSG'</li><br>'
#Get random password
passgen

EGROUPWAREPASS=`echo ${PASSWORD[@]:0} | sed 's/ //g'`

#############################
#Make sure that we know the root mysql password
#############################

/opt/karoshi/serversetup/all/"useful scripts"/mysql_root_pass
#Get root mysql password
MYSQLPASS=`cat /opt/karoshi/server_network/mysql/.key | gpg --no-tty --passphrase-fd 0 -o - /opt/karoshi/server_network/mysql/mysql_password.gpg 2>/dev/null`

########################
#Modify egroupware.sql
########################
sed 's/CHANGETHISEMAILDOMAIN/'$EMAILDOMAIN'/g' /opt/karoshi/serversetup/modules/email/egroupware/egroupware.sql > /opt/karoshi/.tempdata/egroupware.sql

#############################
#create and pipe in the database
#############################

mysqladmin -f --password=$MYSQLPASS drop egroupware 1>/dev/null 2>/dev/null
sleep 1
mysqladmin --password=$MYSQLPASS create egroupware
sleep 1
mysql --password=$MYSQLPASS egroupware < /opt/karoshi/.tempdata/egroupware.sql
rm -f /opt/karoshi/.tempdata/egroupware.sql
echo GRANT ALL PRIVILEGES ON egroupware.\* TO "'"egroupware_user"'"@"'"localhost"'" IDENTIFIED BY "'"$EGROUPWAREPASS"'"';' > /opt/karoshi/.tempdata/mysqlperms.sql
echo ALTER DATABASE egroupware DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_unicode_ci';' >> /opt/karoshi/.tempdata/mysqlperms.sql
mysql --password=$MYSQLPASS < /opt/karoshi/.tempdata/mysqlperms.sql
rm -f /opt/karoshi/.tempdata/mysqlperms.sql

###########################
#Imap plain text
###########################
echo "I accept the risk" > /etc/c-client.cf
echo "set disable-plaintext nil" >> /etc/c-client.cf
echo "set mail-subdirectory Mail" >> /etc/c-client.cf
echo >> /etc/c-client.cf
###########################
#make sure that mysql and apache are running
###########################
MYSQLSTATUS=`ps -e | grep -c -w $MYSQLDVER`
APACHESTATUS=`ps -e | grep -c -w $APACHEVER`
if [ $MYSQLSTATUS = 0 ]
then
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/mysql_start
fi
if [ $APACHESTATUS = 0 ]
then
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_start
fi
[ ! -d /var/www/egroupware-files ] && mkdir /var/www/egroupware-files
[ ! -d /var/www/backup ] && mkdir /var/www/backup
chmod 0750 /var/www/egroupware-files
chown -c $APACHEUSER.$APACHEGROUP /var/www/egroupware-files 1>/dev/null
chmod 0750 /var/www/backup
chown -c $APACHEUSER.$APACHEGROUP /var/www/backup 1>/dev/null

cd /var/www/html/
##########################
#Extract egroupware files
##########################
tar -xzf /opt/karoshi/serversetup/modules/email/egroupware/egroupware.tar.gz
##########################
#Apply egroupware fixes
##########################
#class.accounts.inc.php
#cp -f /opt/karoshi/serversetup/modules/email/egroupware/fixes/class.accounts.inc.php /var/www/html/egroupware/phpgwapi/inc/
#class.ajaxfelamimail.inc.php
#cp -f /opt/karoshi/serversetup/modules/email/egroupware/fixes/class.ajaxfelamimail.inc.php /var/www/html/egroupware/felamimail/inc/
##########################
#Set permissions
##########################
chown -c -R root.$APACHEGROUP /var/www/html/egroupware 1>/dev/null
chmod 0440 -R /var/www/html/egroupware
chmod u+X,g+X -R /var/www/html/egroupware
###########################
#Modify header.inc.php
###########################


#Create rmcrypt vector for header.inc.php
RANGE=61
COUNTER=1
while [ $COUNTER -lt 30 ]
do
row[$COUNTER]=$RANDOM
let "row[$COUNTER] %= $RANGE"
while [ ${row[$COUNTER]} = 0 ]
do
row[$COUNTER]=$RANDOM
let "row[$COUNTER] %= $RANGE"
done
CHARACTER[$COUNTER]=`sed -n ${row[$COUNTER]},1p /opt/karoshi/serversetup/pdc/"useful scripts"/.alphabet`

let COUNTER=COUNTER+1

done
MCRYPTVECTOR=`echo ${CHARACTER[@]:0} | sed 's/ //g'`



sed -i 's/egroupwarepassword/'$EGROUPWAREPASS'/g' /var/www/html/egroupware/header.inc.php
##########################
#make sure that apache, postfix, mailscanner and imap is running
##########################
APACHESTATUS=`ps -e | grep -c $APACHEVER`
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/postfix_stop  1>/dev/null
echo '<br>'
#############
#generate aliases.db in /etc/postfix/
#############
touch /etc/postfix/aliases
newaliases
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/postfix_start  1>/dev/null
if [ $APACHESTATUS = 0 ]
then
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/apache_start 
fi
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/mailscanner_stop
sleep 1
echo '<br>'
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/clamd_start 
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/mailscanner_start 
echo '<br>'
##########################
#Restart dovecot
##########################
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/dovecot_stop 
sleep 0.5
echo '<br>'
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/dovecot_start
echo '<br><br>'

###########################
#Open shorewall ports
###########################
RESTART_SHOREWALL=no
MODCHECK=`grep -c -w \#apache_webserver_rule /etc/shorewall/rules`
if [ $MODCHECK = 0 ]
then
RESTART_SHOREWALL=yes
echo ''$SHOREWALLMSG - tcp 80,443'<br><br>'
LINENUM=`grep -n 'LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE' /etc/shorewall/rules | cut -d: -f1`
sed -i $LINENUM'c'\ACCEPT'	'net'	'fw'	'tcp'	'80,443'	'-'#'apache_webserver_rule /etc/shorewall/rules
echo '#'LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
fi

MODCHECK=`grep -c -w \#email_server_rule /etc/shorewall/rules`
if [ $MODCHECK = 0 ]
then
RESTART_SHOREWALL=yes
echo ''$SHOREWALLMSG - tcp 25,110,143,993,995 udp 110,143,993,995'<br><br>'
LINENUM=`grep -n 'LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE' /etc/shorewall/rules | cut -d: -f1`
sed -i $LINENUM'c'\ACCEPT'	'net'	'fw'	'tcp'	'25,110,143,993,995'	'-'#'email_server_rule /etc/shorewall/rules
echo ACCEPT'	'net'	'fw'	'udp'	'25,110,143,993,995'	'-'#'email_server_rule >> /etc/shorewall/rules
echo '#'LAST LINE -- ADD YOUR ENTRIES BEFORE THIS ONE -- DO NOT REMOVE >> /etc/shorewall/rules
fi


######################
#Restart shorewall
######################
if [ $RESTART_SHOREWALL = yes ]
then
echo $RESTARTSWMSG'<br><br>'
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_stop
echo '<br>'
/opt/karoshi/serversetup/distro/$DISTROCHOICE/scripts/control_services/shorewall_start
echo '<br><br>'
fi
###########################
#Show completed message
###########################
echo $ACCESSMSG1 - '<a href="https://'$EMAILDOMAIN'/squirrelmail" target="_blank">http://'$EMAILDOMAIN'/squirrelmail</a><br>'
echo $ACCESSMSG2 - '<a href="https://'$EMAILDOMAIN'/egroupware" target="_blank">http://'$EMAILDOMAIN'/egroupware</a><br><br>'
exit
